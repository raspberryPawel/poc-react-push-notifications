{"version":3,"sources":["logo.svg","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","messaging","getMessaging","fetchToken","setTokenFound","a","navigator","serviceWorker","register","swtoken","getToken","serviceWorkerRegistration","vapidKey","then","currentToken","console","log","catch","err","App","useState","show","setShow","title","body","notification","setNotification","isTokenFound","Promise","resolve","onMessage","payload","className","Toast","onClose","delay","autohide","animation","style","position","top","right","minWidth","Header","src","alt","Body","logo","Button","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAe,MAA0B,iC,+CCYnCA,EAAcC,YATC,CACnBC,OAAQ,0CACRC,WAAY,4CACZC,UAAW,4BACXC,cAAe,wCACfC,kBAAmB,gBACnBC,MAAO,+CAIHC,EAAYC,YAAaT,GAElBU,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACFC,UAAUC,cAAcC,SAAS,4BAD/B,cAClBC,EADkB,yBAGjBC,YAAST,EAAW,CAACU,0BAA2BF,EAASG,SAAU,4FAA4FC,MAAK,SAACC,GACtKA,GACFC,QAAQC,IAAI,6BAA8BF,GAC1CV,GAAc,KAIdW,QAAQC,IAAI,wEACZZ,GAAc,OAGfa,OAAM,SAACC,GACRH,QAAQC,IAAI,6CAA8CE,OAfpC,2CAAH,sD,sBCwCRC,MAhDf,WAAgB,IAAD,EAEWC,oBAAS,GAFpB,mBAENC,EAFM,KAEAC,EAFA,OAG2BF,mBAAS,CAACG,MAAO,GAAIC,KAAM,KAHtD,mBAGNC,EAHM,KAGQC,EAHR,OAIyBN,oBAAS,GAJlC,mBAINO,EAJM,KAIQvB,EAJR,KAkBb,OAbAD,EAAWC,GDwBX,IAAIwB,SAAQ,SAACC,GACXC,YAAU7B,GAAW,SAAC8B,GACpBF,EAAQE,SCxBQlB,MAAK,SAAAkB,GACvBL,EAAgB,CAACH,MAAOQ,EAAQN,aAAaF,MAAOC,KAAMO,EAAQN,aAAaD,OAC/EF,GAAQ,GACRP,QAAQC,IAAIe,MACXd,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAI,WAAYE,MAQtC,sBAAKc,UAAU,MAAf,UACI,eAACC,EAAA,EAAD,CAAOC,QAAS,kBAAMZ,GAAQ,IAAQD,KAAMA,EAAMc,MAAO,IAAMC,UAAQ,EAACC,WAAS,EAACC,MAAO,CACvFC,SAAU,WACVC,IAAK,GACLC,MAAO,GACPC,SAAU,KAJZ,UAME,eAACT,EAAA,EAAMU,OAAP,WACE,qBACEC,IAAI,2BACJZ,UAAU,eACVa,IAAI,KAEN,wBAAQb,UAAU,UAAlB,SAA6BP,EAAaF,QAC1C,gDAEF,cAACU,EAAA,EAAMa,KAAP,UAAarB,EAAaD,UAE9B,yBAAQQ,UAAU,aAAlB,UACGL,GAAgB,6FACfA,GAAgB,6EAClB,qBAAKiB,IAAKG,EAAMf,UAAU,WAAWa,IAAI,SACzC,cAACG,EAAA,EAAD,CAAQC,QAAS,kBA3BrBvB,EAAgB,CAACH,MAAO,eAAgBC,KAAM,qCAC9CF,GAAQ,IA0BJ,+BCpCO4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1BZ,M","file":"static/js/main.b2dcb6ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { initializeApp } from 'firebase/app';\nimport { getMessaging, getToken, onMessage } from \"firebase/messaging\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyATALDOh3qTJJc_ebhrCxHQr5pR9fssDhM\",\n  authDomain: \"plants-keeper-example-app.firebaseapp.com\",\n  projectId: \"plants-keeper-example-app\",\n  storageBucket: \"plants-keeper-example-app.appspot.com\",\n  messagingSenderId: \"1011001796760\",\n  appId: \"1:1011001796760:web:469d05053d546f469fc8ed\"\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst messaging = getMessaging(firebaseApp);\n\nexport const fetchToken = async (setTokenFound) => {\n  const swtoken = await navigator.serviceWorker.register('firebase-messaging-sw.js');\n\n  return getToken(messaging, {serviceWorkerRegistration: swtoken, vapidKey: 'BFnsSCzGNNYNTRG4V7c9bTEmS6--5c1OCptI6f51J-2ywfpwJMqEdFHorN84mGlTiBeWOwMHxWcQ-FIWRjCOPgQ'}).then((currentToken) => {\n    if (currentToken) {\n      console.log('current token for client: ', currentToken);\n      setTokenFound(true);\n      // Track the token -> client mapping, by sending to backend server\n      // show on the UI that permission is secured\n    } else {\n      console.log('No registration token available. Request permission to generate one.');\n      setTokenFound(false);\n      // shows on the UI that permission is required \n    }\n  }).catch((err) => {\n    console.log('An error occurred while retrieving token. ', err);\n    // catch error while creating client token\n  });\n}\n\nexport const onMessageListener = () =>\n  new Promise((resolve) => {\n    onMessage(messaging, (payload) => {\n      resolve(payload);\n    });\n});","import logo from './logo.svg';\nimport './App.css';\nimport {useState} from 'react';\nimport { fetchToken, onMessageListener } from './firebase';\nimport {Button, Toast} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n  const [show, setShow] = useState(false);\n  const [notification, setNotification] = useState({title: '', body: ''});\n  const [isTokenFound, setTokenFound] = useState(false);\n  fetchToken(setTokenFound);\n\n  onMessageListener().then(payload => {\n    setNotification({title: payload.notification.title, body: payload.notification.body})\n    setShow(true);\n    console.log(payload);\n  }).catch(err => console.log('failed: ', err));\n\n  const onShowNotificationClicked = () => {\n    setNotification({title: \"Notification\", body: \"This is a test notification\"})\n    setShow(true);\n  }\n\n  return (\n    <div className=\"App\">\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide animation style={{\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          minWidth: 200\n        }}>\n          <Toast.Header>\n            <img\n              src=\"holder.js/20x20?text=%20\"\n              className=\"rounded mr-2\"\n              alt=\"\"\n            />\n            <strong className=\"mr-auto\">{notification.title}</strong>\n            <small>just now</small>\n          </Toast.Header>\n          <Toast.Body>{notification.body}</Toast.Body>\n        </Toast>\n      <header className=\"App-header\">\n        {isTokenFound && <h1> Notification permission enabled üëçüèª </h1>}\n        {!isTokenFound && <h1> Need notification permission ‚ùóÔ∏è </h1>}\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Button onClick={() => onShowNotificationClicked()}>Show Toast</Button>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\nreportWebVitals();\n"],"sourceRoot":""}